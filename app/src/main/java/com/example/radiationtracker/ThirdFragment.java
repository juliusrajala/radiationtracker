package com.example.radiationtracker;

import android.app.Fragment;
import android.content.Context;
import android.graphics.Shader;
import android.graphics.SurfaceTexture;
import android.hardware.Camera;
import android.opengl.GLES20;
import android.opengl.GLSurfaceView;
import android.os.Bundle;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import java.nio.ByteBuffer;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

/**
 * Created by Julius on 23.9.2014.
 * Kolmas näkymä joka tulee piirtämään GL:n avulla texturesurfacen kamera-feedistä.
 * TODO: Katso mallia secondFragmentistä ja netistä
 */
public class ThirdFragment extends Fragment {
    public static ThirdFragment newInstance(){
        ThirdFragment fragmentThird = new ThirdFragment();
        Bundle args = new Bundle();
        fragmentThird.setArguments(args);
        return fragmentThird;
    }

    @Override
    public void onCreate(Bundle savedInstanceState){
        super.onCreate(savedInstanceState);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState){
        View view = inflater.inflate(R.layout.fragment_third, container, false);
        return view;
    }

    class CameraRenderer extends GLSurfaceView implements
            GLSurfaceView.Renderer,
            SurfaceTexture.OnFrameAvailableListener{

        private Context mContext;
        private Camera mCamera;
        private SurfaceTexture mSurfaceTexture;

        private final OESTexture mCameraTexture = new OESTexture();
        private final Shader mOffScreenShader = new Shader();
        private int mWidth, mHeight;
        private boolean updateTexture = false;

        private ByteBuffer mFullQuadVertices;
        private float[] mTransformM = new float[16];
        private float[] mOrientationM = new float[16];
        private float[] mRatio = new float[2];

        public CameraRenderer(Context context){
            super(context);
            mContext = context;
            init();
        }

        public CameraRenderer(Context context, AttributeSet attrs){
            super(context, attrs);
            mContext = context;
            init();
        }

        private void init(){
            final byte FULL_QUAD_COORDS[] = {-1,1,-1,-1,1,1,1,-1};
            mFullQuadVertices = ByteBuffer.allocateDirect(4*2);
            mFullQuadVertices.put(FULL_QUAD_COORDS).position(0);

            setPreserveEGLContextOnPause(true);
            setEGLContextClientVersion(2);
            setRenderer(this);
            setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);
        }

        @Override
        public synchronized void onSurfaceCreated(GL10 gl, EGLConfig config){
            //Shader tähän...
            try{
                mOffScreenShader.setProgram(R.raw.vshader, R.raw.fshader, mContext);
            }catch (Exception e){
                //TODO: Autogenerated catch block
                e.printStackTrace();
            }
        }

        @Override
        public synchronized void onSurfaceChanged(GL10 gl, int width, int height){
            //Avaa kamera ja aloita preview tässä metodissa
            mSurfaceTexture.setOnFrameAvailableListener(this);
            //...
            SurfaceTexture mSurfaceTexture = new SurfaceTexture(mCameraTexture.getTextureId());
            //...

        }

        @Override
        public synchronized void onFrameAvailable(SurfaceTexture surfaceTexture){
            //Pyydä renderiä piirtämään frame sen ollessa olemassa.
            updateTexture = true;
            requestRender();
        }

        @Override
        public synchronized void onDrawFrame(GL10 gl){
            //Draw frame as required.
            GLES20.glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
            GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);

            if(updateTexture){
                mSurfaceTexture.updateTexImage();
                //...
                mSurfaceTexture.getTransformMatrix(mTransformM);

                updateTexture=false;

                GLES20.glViewport(0,0,mWidth,mHeight);

                mOffScreenShader.useProgram();

                int uTransformM = mOffScreenShader.getHandle("uTransformM");
                int uOrientationM = mOffScreenShader.getHandle("uOrientationM");
                int uRatioV = mOffScreenShader.getHandle("ratios");

                GLES20.glUniformMatrix4fv(uTransformM, 1, false, mTransformM, 0);
                GLES20.glUniformMatrix4fv(uOrientationM, 1, false, mOrientationM,0);
                GLES20.glUniform2fv(uRatioV, 1, mRatio, 0);

                GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
                GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mCameraTexture.getTextureId());

                renderQuad(mOffScreenShader.getHandle("aPosition"));

            }
        }

        private void renderQuad(int aPosition){
            GLES20.glVertexAttribPointer(aPosition, 2, GLES20.GL_BYTE, false, 0, mFullQuadVertices);

        }
    }
}
